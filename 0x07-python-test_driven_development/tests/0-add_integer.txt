============================
The ``0-add_integer`` module
============================

Using ``add_integer``
=====================
Returns the sum of its arguments as an integer.

First import ``add_integer`` from the ``0-add_integer`` module:

        >>> add_integer = __import__('0-add_integer').add_integer

Now use it:
numbers
-------
::
        >>> add_integer(2, 4)
        6
        >>> add_integer(100, -2)
        98
        >>> add_integer(2)
        100
        >>> add_integer(100.3, -2)
        98
        >>> add_integer(0, 0)
        0

non-numbers
-----------
::
        >>> add_integer(4, "School")
        Traceback (most recent call last):
                ...
        TypeError: b must be an integer
        >>> add_integer(None)
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer
        >>> add_integer('a', 'b')
        Traceback (most recent call last):
                ...
        TypeError: a must be an integer

The function will fail if infinity is provided.

        >>> add_integer(2, float('inf'))
        Traceback (most recent call last):
                ...
        OverflowError: cannot convert float infinity to integer

Also with NaN numbers.

        >>> add_integer(float('nan'))
        Traceback (most recent call last):
                ...
        ValueError: cannot convert float NaN to integer
